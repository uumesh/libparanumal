/*

The MIT License (MIT)

Copyright (c) 2017-2022 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

void surfaceTerms(const int emap,
                  const int sk,
                  const int face,
                  const int m,
                  const int i,
                  const int j,
                  const dfloat tau,
                  const dfloat *sgeo,
                  const int *vmapM,
                  const int *vmapP,
                  const int *EToB,
                  const dfloat4 *gradq,
                  dfloat s_dqdx[2][p_Nq][p_Nq],
                  dfloat s_dqdy[2][p_Nq][p_Nq],
                  dfloat s_dqdz[2][p_Nq][p_Nq],
                  dfloat s_rhsq[2][p_Nq][p_Nq]){

  const dlong  idM = vmapM[sk];
  const dlong  idP = vmapP[sk];

  const dfloat nx  = sgeo[sk*p_Nsgeo+p_NXID];
  const dfloat ny  = sgeo[sk*p_Nsgeo+p_NYID];
  const dfloat nz  = sgeo[sk*p_Nsgeo+p_NZID];
  const dfloat WsJ = sgeo[sk*p_Nsgeo+p_WSJID];
  const dfloat hinv= sgeo[sk*p_Nsgeo+p_IHID];

  const dfloat4 gradqM = gradq[idM];
  dfloat4 gradqP = gradq[idP];

  const int bc = EToB[face+p_Nfaces*emap];
  if(bc>0) {
    fpeBoundaryConditions3D(bc, time, x[idM], y[idM], z[idM], nx, ny, nz,
                             gradqM.w,  gradqM.x,  gradqM.y,  gradqM.z,
                            &gradqP.w, &gradqP.x, &gradqP.y, &gradqP.z);
  }

  const dfloat dq = gradqP.w - gradqM.w;

  s_dqdx[m][j][i] = 0.5f*WsJ*nx*dq;
  s_dqdy[m][j][i] = 0.5f*WsJ*ny*dq;
  s_dqdz[m][j][i] = 0.5f*WsJ*nz*dq;

  s_rhsq[m][j][i] = -0.5f*WsJ*(nx*(gradqP.x+gradqM.x) +
                               ny*(gradqP.y+gradqM.y) +
                               nz*(gradqP.z+gradqM.z) +
                               tau*hinv*dq);
}


@kernel void fpeDiffusionHex3D(const dlong Nelements,
                              @restrict const  dlong  *  elementList,
                              @restrict const  dlong  *  vmapM,
                              @restrict const  dlong  *  vmapP,
                                        const  dfloat    tau,
                              @restrict const  dfloat *  vgeo,
                              @restrict const  dfloat *  sgeo,
                              @restrict const  int    *  EToB,
                              @restrict const  dfloat *  const DT,
                              @restrict const  dfloat *  LIFT,
                                        const  dfloat    t,
                              @restrict const  dfloat *  x,
                              @restrict const  dfloat *  y,
                              @restrict const  dfloat *  z,
                                        const  dfloat    mu,
                              @restrict const  dfloat4 * gradq,
                              @restrict dfloat  *  rhs){

  for(dlong e=0;e<Nelements;++e;@outer(0)){

    @shared dfloat s_dqdx[2][p_Nq][p_Nq];
    @shared dfloat s_dqdy[2][p_Nq][p_Nq];
    @shared dfloat s_dqdz[2][p_Nq][p_Nq];
    @shared dfloat s_rhsq[2][p_Nq][p_Nq];

    @shared dfloat s_DT[p_Nq][p_Nq];

    @exclusive dfloat r_dqdx[p_Nq], r_dqdy[p_Nq], r_dqdz[p_Nq], r_rhsq[p_Nq];
    @exclusive dfloat r_dqdt;

    @exclusive dlong emap;

    // loop over slabs
    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        emap = elementList[e];

        #pragma unroll p_Nq
        for(int k=0;k<p_Nq;++k){
          // assume that this stores (p, px, py, pz) as dfloat4
          const dfloat4 gradqn = gradq[emap*p_Np+k*p_Nq*p_Nq+j*p_Nq+i];
          const dlong gid = i + j*p_Nq + k*p_Nq*p_Nq + e*p_Np*p_Nvgeo;
          const dfloat JW = vgeo[gid + p_JWID*p_Np];

          r_dqdx[k] = JW*gradqn.x;
          r_dqdy[k] = JW*gradqn.y;
          r_dqdz[k] = JW*gradqn.z;
          r_rhsq[k] = 0.0;
        }

        s_DT[j][i] = DT[j*p_Nq+i];
      }
    }


    // face 0 & 5
    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        const dlong sk0 = emap*p_Nfp*p_Nfaces + 0*p_Nfp + j*p_Nq + i ;
        const dlong sk5 = emap*p_Nfp*p_Nfaces + 5*p_Nfp + j*p_Nq + i ;

        //        surfaceTerms(emap,sk0,0,0,i,j);
        surfaceTerms(emap,sk0, 0, 0, i, j, tau,
                     sgeo, vmapM, vmapP, EToB, gradq,
                     s_dqdx, s_dqdy, s_dqdz, s_rhsq);

        //        surfaceTerms(emap,sk5,5,1,i,j);
        surfaceTerms(emap,sk5, 5, 1, i, j, tau,
                     sgeo, vmapM, vmapP, EToB, gradq,
                     s_dqdx, s_dqdy, s_dqdz, s_rhsq);

      }
    }


    // face 0 & 5
    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        //face 0
        r_dqdx[0] += s_dqdx[0][j][i];
        r_dqdy[0] += s_dqdy[0][j][i];
        r_dqdz[0] += s_dqdz[0][j][i];
        r_rhsq[0] += s_rhsq[0][j][i];

        //face 5
        r_dqdx[p_Nq-1] += s_dqdx[1][j][i];
        r_dqdy[p_Nq-1] += s_dqdy[1][j][i];
        r_dqdz[p_Nq-1] += s_dqdz[1][j][i];
        r_rhsq[p_Nq-1] += s_rhsq[1][j][i];
      }
    }


    // face 1 & 3
    for(int k=0;k<p_Nq;++k;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        const dlong sk1 = emap*p_Nfp*p_Nfaces + 1*p_Nfp + k*p_Nq + i ;
        const dlong sk3 = emap*p_Nfp*p_Nfaces + 3*p_Nfp + k*p_Nq + i ;

        //        surfaceTerms(emap,sk1,1,0,i,k);
        surfaceTerms(emap,sk1, 1, 0, i, k, tau,
                     sgeo, vmapM, vmapP, EToB, gradq,
                     s_dqdx, s_dqdy, s_dqdz, s_rhsq);

        //        surfaceTerms(emap,sk3,3,1,i,k);
        surfaceTerms(emap,sk3, 3, 1, i, k, tau,
                     sgeo, vmapM, vmapP, EToB, gradq,
                     s_dqdx, s_dqdy, s_dqdz, s_rhsq);

      }
    }


    // face 1 & 3
    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        if (j==0) {//face 1
          #pragma unroll p_Nq
          for (int k=0;k<p_Nq;k++) {
            r_dqdx[k] += s_dqdx[0][k][i];
            r_dqdy[k] += s_dqdy[0][k][i];
            r_dqdz[k] += s_dqdz[0][k][i];
            r_rhsq[k] += s_rhsq[0][k][i];
          }
        }
        if (j==p_Nq-1) {//face 3
          #pragma unroll p_Nq
          for (int k=0;k<p_Nq;k++) {
            r_dqdx[k] += s_dqdx[1][k][i];
            r_dqdy[k] += s_dqdy[1][k][i];
            r_dqdz[k] += s_dqdz[1][k][i];
            r_rhsq[k] += s_rhsq[1][k][i];
          }
        }
      }
    }


    // face 2 & 4
    for(int k=0;k<p_Nq;++k;@inner(1)){
      for(int j=0;j<p_Nq;++j;@inner(0)){

        const dlong sk2 = emap*p_Nfp*p_Nfaces + 2*p_Nfp + k*p_Nq + j ;
        const dlong sk4 = emap*p_Nfp*p_Nfaces + 4*p_Nfp + k*p_Nq + j ;

        //        surfaceTerms(emap,sk2,2,0,j,k);
        surfaceTerms(emap,sk2, 2, 0, j, k, tau,
                     sgeo, vmapM, vmapP, EToB, gradq,
                     s_dqdx, s_dqdy, s_dqdz, s_rhsq);

        //surfaceTerms(emap,sk4,4,1,j,k);
        surfaceTerms(emap,sk4, 4, 1, j, k, tau,
                     sgeo, vmapM, vmapP, EToB, gradq,
                     s_dqdx, s_dqdy, s_dqdz, s_rhsq);
      }
    }


    // face 2 & 4
    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        if (i==p_Nq-1) {//face 2
          #pragma unroll p_Nq
          for (int k=0;k<p_Nq;k++) {
            r_dqdx[k] += s_dqdx[0][k][j];
            r_dqdy[k] += s_dqdy[0][k][j];
            r_dqdz[k] += s_dqdz[0][k][j];
            r_rhsq[k] += s_rhsq[0][k][j];
          }
        }
        if (i==0) {//face 4
          #pragma unroll p_Nq
          for (int k=0;k<p_Nq;k++) {
            r_dqdx[k] += s_dqdx[1][k][j];
            r_dqdy[k] += s_dqdy[1][k][j];
            r_dqdz[k] += s_dqdz[1][k][j];
            r_rhsq[k] += s_rhsq[1][k][j];
          }
        }
      }
    }


    //layer by layer
    #pragma unroll p_Nq
    for(int k=0;k<p_Nq;++k){
      for(int j=0;j<p_Nq;++j;@inner(1)){
        for(int i=0;i<p_Nq;++i;@inner(0)){

          const dlong gid = i + j*p_Nq + k*p_Nq*p_Nq + emap*p_Np*p_Nvgeo;

          const dfloat drdx = vgeo[gid + p_RXID*p_Np];
          const dfloat drdy = vgeo[gid + p_RYID*p_Np];
          const dfloat drdz = vgeo[gid + p_RZID*p_Np];

          const dfloat dsdx = vgeo[gid + p_SXID*p_Np];
          const dfloat dsdy = vgeo[gid + p_SYID*p_Np];
          const dfloat dsdz = vgeo[gid + p_SZID*p_Np];

          const dfloat dtdx = vgeo[gid + p_TXID*p_Np];
          const dfloat dtdy = vgeo[gid + p_TYID*p_Np];
          const dfloat dtdz = vgeo[gid + p_TZID*p_Np];

          const dfloat dqdx = r_dqdx[k];
          const dfloat dqdy = r_dqdy[k];
          const dfloat dqdz = r_dqdz[k];

          s_dqdx[0][j][i] = (drdx*dqdx + drdy*dqdy + drdz*dqdz);
          s_dqdy[0][j][i] = (dsdx*dqdx + dsdy*dqdy + dsdz*dqdz);
          r_dqdt = (dtdx*dqdx + dtdy*dqdy + dtdz*dqdz);
        }
      }


      for(int j=0;j<p_Nq;++j;@inner(1)){
        for(int i=0;i<p_Nq;++i;@inner(0)){
          dfloat dr = 0, ds = 0;

          #pragma unroll p_Nq
          for(int n=0;n<p_Nq;++n){
            dr += s_DT[n][i]*s_dqdx[0][j][n];
            r_rhsq[n] += s_DT[k][n]*r_dqdt; // DT(m,k)*ut(i,j,k,e)
            ds += s_DT[n][j]*s_dqdy[0][n][i];
          }

          r_rhsq[k] += dr + ds;
        }
      }

    }

    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){

        #pragma unroll p_Nq
        for(int k=0;k<p_Nq;++k){
          const dlong gid = i + j*p_Nq + k*p_Nq*p_Nq + e*p_Np*p_Nvgeo;
          const dfloat invJW = vgeo[gid + p_IJWID*p_Np];

          const dlong id = emap*p_Np + k*p_Nq*p_Nq + j*p_Nq + i;
          rhs[id] -= mu*invJW*r_rhsq[k];
        }
      }
    }
  }
}

