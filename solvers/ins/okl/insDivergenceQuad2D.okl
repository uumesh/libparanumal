/*

The MIT License (MIT)

Copyright (c) 2017-2022 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

// Computes volume contribution of div(UI)
@kernel void insDivergenceVolumeQuad2D(const dlong Nelements,
                                      @restrict const  dfloat *  vgeo,
                                      @restrict const  dfloat *  DT,
                                      const dfloat alpha,
                                      const dfloat beta,
                                      @restrict const  dfloat *  U,
                                            @restrict  dfloat *  RHS){

  for(dlong eo=0;eo<Nelements;eo+=p_NblockV;@outer(0)){  // for all elements

    @shared dfloat s_U[p_NblockV][p_Nq][p_Nq];
    @shared dfloat s_V[p_NblockV][p_Nq][p_Nq];
    @shared dfloat s_DT[p_Nq][p_Nq];

    for(int es=0;es<p_NblockV;++es;@inner(2)){
      for(int j=0;j<p_Nq;++j;@inner(1)){
        for(int i=0;i<p_Nq;++i;@inner(0)){
          const dlong e = eo+es; // element in block
          if(e<Nelements){
            const dlong id = e*p_Np*p_NVfields + j*p_Nq+i;

            s_U[es][j][i] = U[id+0*p_Np];
            s_V[es][j][i] = U[id+1*p_Np];

            if (es==0)
              s_DT[j][i] = DT[j*p_Nq+i];
          }
        }
      }
    }

    // Make sure all node data is loaded into @shared

    for(int es=0;es<p_NblockV;++es;@inner(2)){
      for(int j=0;j<p_Nq;++j;@inner(1)){
        for(int i=0;i<p_Nq;++i;@inner(0)){
          const dlong e = eo+es;
          if(e<Nelements){
            const dlong gid = e*p_Np*p_Nvgeo+ j*p_Nq +i;
            const dfloat drdx = vgeo[gid + p_RXID*p_Np];
            const dfloat drdy = vgeo[gid + p_RYID*p_Np];
            const dfloat dsdx = vgeo[gid + p_SXID*p_Np];
            const dfloat dsdy = vgeo[gid + p_SYID*p_Np];

            dfloat dUdr  = 0.f, dUds  = 0.f;
            dfloat dVdr  = 0.f, dVds  = 0.f;

            #pragma unroll p_Nq
              for(int n=0;n<p_Nq;++n){
                const dfloat Dr = s_DT[i][n];
                const dfloat Ds = s_DT[j][n];

                dUdr += Dr*s_U[es][j][n];
                dUds += Ds*s_U[es][n][i];
                dVdr += Dr*s_V[es][j][n];
                dVds += Ds*s_V[es][n][i];
              }

            const dlong id = e*p_Np + j*p_Nq + i;
            const dfloat dUdx = drdx*dUdr + dsdx*dUds;
            const dfloat dVdy = drdy*dVdr + dsdy*dVds;

            if (beta!=0.0) {
              RHS[id] = beta*RHS[id] + alpha*(dUdx + dVdy);
            } else {
              RHS[id] = alpha*(dUdx + dVdy);
            }
          }
        }
      }
    }
  }
}


#define surfaceTerms(sk,face,i, j)                                      \
  {                                                                     \
  const dlong idM = vmapM[sk];                                          \
  const dlong idP = vmapP[sk];                                          \
                                                                        \
  const dfloat nx = sgeo[sk*p_Nsgeo+p_NXID];                            \
  const dfloat ny = sgeo[sk*p_Nsgeo+p_NYID];                            \
  const dfloat sJ = sgeo[sk*p_Nsgeo+p_SJID];                            \
  const dfloat invWJ = sgeo[sk*p_Nsgeo+p_WIJID];                        \
                                                                        \
  const dlong eM = e;                                                   \
  const dlong eP = idP/p_Np;                                            \
  const int vidM = idM%p_Np;                                            \
  const int vidP = idP%p_Np;                                            \
                                                                        \
  const dlong qbaseM = eM*p_Np*p_NVfields + vidM;                       \
  const dlong qbaseP = eP*p_Np*p_NVfields + vidP;                       \
                                                                        \
  const dfloat uM = U[qbaseM+0*p_Np], vM = U[qbaseM+1*p_Np];            \
        dfloat uP = U[qbaseP+0*p_Np], vP = U[qbaseP+1*p_Np];            \
                                                                        \
  const int bc = EToB[face+p_Nfaces*e];                                 \
  if(bc>0) {                                                            \
    insVelocityDirichletConditions2D(bc, nu, time, x[idM], y[idM], nx, ny, uM, vM, &uP, &vP);\
    uP = 2.f*uP-uM;                                                     \
    vP = 2.f*vP-vM;                                                     \
  }                                                                     \
                                                                        \
  const dfloat sc = invWJ * sJ;                                         \
  s_fluxU[es][j][i] = 0.5f*sc*(nx*(uP-uM) + ny*(vP-vM));                \
  }

@kernel void insDivergenceSurfaceQuad2D(const dlong Nelements,
                                       @restrict const  dfloat *  sgeo,
                                       @restrict const  dfloat *  LIFT,
                                       @restrict const  dlong  *  vmapM,
                                       @restrict const  dlong  *  vmapP,
                                       @restrict const  int    *  EToB,
                                       const dfloat time,
                                       @restrict const  dfloat *  x,
                                       @restrict const  dfloat *  y,
                                       @restrict const  dfloat *  z,
                                       const dfloat nu,
                                       const dfloat alpha,
                                       @restrict const  dfloat *  U,
                                             @restrict  dfloat *  RHS){

  // for all elements
  for(dlong eo=0;eo<Nelements;eo+=p_NblockS;@outer(0)){
    // @shared storage for flux terms
    @shared dfloat s_fluxU[p_NblockS][p_Nq][p_Nq];

    for(int j=0;j<p_Nq;++j){
      for(int es=0;es<p_NblockS;++es;@inner(1)){
        for(int i=0;i<p_Nq;++i;@inner(0)){
          s_fluxU[es][j][i] = 0.;
        }
      }
    }


    // for all face nodes of all elements
    // face 0 & 2
    for(int es=0;es<p_NblockS;++es;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        const dlong e = eo + es;
        if(e<Nelements){
          dlong sk0 = e*p_Nfp*p_Nfaces + 0*p_Nfp + i;
          dlong sk2 = e*p_Nfp*p_Nfaces + 2*p_Nfp + i;

          surfaceTerms(sk0,0,i,0     );
          surfaceTerms(sk2,2,i,p_Nq-1);
        }
      }
    }


    // face 1 & 3
    for(int es=0;es<p_NblockS;++es;@inner(1)){
      for(int j=0;j<p_Nq;++j;@inner(0)){
        const dlong e = eo + es;
        if(e<Nelements){
          dlong sk1 = e*p_Nfp*p_Nfaces + 1*p_Nfp + j;
          dlong sk3 = e*p_Nfp*p_Nfaces + 3*p_Nfp + j;

          surfaceTerms(sk1,1,p_Nq-1,j);
          surfaceTerms(sk3,3,0     ,j);
        }
      }
    }


    // for each node in the element
    for(int j=0;j<p_Nq;++j){
      for(int es=0;es<p_NblockS;++es;@inner(1)){
        for(int i=0;i<p_Nq;++i;@inner(0)){
          const dlong e = eo + es;
          if(e<Nelements){
            const dlong id = e*p_Np + j*p_Nq + i;
            RHS[id] += alpha*s_fluxU[es][j][i];
          }
        }
      }
    }
  }
}

