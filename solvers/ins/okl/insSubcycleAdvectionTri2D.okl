/*

The MIT License (MIT)

Copyright (c) 2017-2022 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/



// compute NU = -div(uxu) in collocation way
@kernel void insSubcycleAdvectionVolumeTri2D(const dlong Nelements,
                                @restrict const  dfloat *  vgeo,
                                @restrict const  dfloat *  D,
                                @restrict const  dfloat *  Ue,
                                @restrict const  dfloat *  U,
                                      @restrict  dfloat *  RHS){

  for(dlong eo=0;eo<Nelements;eo+=p_NblockV;@outer(0)){  // for all elements

    // Hold Flux Vector on Shared
    @shared dfloat s_F11[p_NblockV][p_Np];
    @shared dfloat s_F12[p_NblockV][p_Np];
    @shared dfloat s_F21[p_NblockV][p_Np];
    @shared dfloat s_F22[p_NblockV][p_Np];
    //
    for(int es=0;es<p_NblockV;++es;@inner(1)){// for all elements in block
      for(int n=0;n<p_Np;++n;@inner(0)){     // for all nodes in this element
        dlong e = eo+es; // element in block
        if(e<Nelements){
          const dlong id = e*p_Np*p_NVfields+n;
          const dfloat ux = Ue[id+0*p_Np];
          const dfloat uy = Ue[id+1*p_Np];
          const dfloat px = U[id+0*p_Np];
          const dfloat py = U[id+1*p_Np];

          s_F11[es][n] = ux*px;
          s_F12[es][n] = uy*px;
          s_F21[es][n] = ux*py;
          s_F22[es][n] = uy*py;
        }
      }
    }

    // Make sure all node data is loaded into @shared

    for(int es=0;es<p_NblockV;++es;@inner(1)){
      for(int n=0;n<p_Np;++n;@inner(0)){
        const dlong e = eo+es;
        if(e<Nelements){
          // prefetch geometric factors (constant on triangle)
          const dfloat drdx = vgeo[e*p_Nvgeo + p_RXID];
          const dfloat drdy = vgeo[e*p_Nvgeo + p_RYID];
          const dfloat dsdx = vgeo[e*p_Nvgeo + p_SXID];
          const dfloat dsdy = vgeo[e*p_Nvgeo + p_SYID];
          // compute 'r' and 's' derivatives of (q_m) at node n
          dfloat df11dr = 0.f, df11ds = 0.f;
          dfloat df12dr = 0.f, df12ds = 0.f;
          dfloat df21dr = 0.f, df21ds = 0.f;
          dfloat df22dr = 0.f, df22ds = 0.f;

          #pragma unroll p_Np
          for(int i=0;i<p_Np;++i){
            const dfloat Drni = D[n+i*p_Np+0*p_Np*p_Np];
            const dfloat Dsni = D[n+i*p_Np+1*p_Np*p_Np];

            df11dr += Drni*s_F11[es][i];
            df11ds += Dsni*s_F11[es][i];

            df12dr += Drni*s_F12[es][i];
            df12ds += Dsni*s_F12[es][i];

            df21dr += Drni*s_F21[es][i];
            df21ds += Dsni*s_F21[es][i];

            df22dr += Drni*s_F22[es][i];
            df22ds += Dsni*s_F22[es][i];
          }

          const dfloat rhsux   = drdx*df11dr + dsdx*df11ds
                               + drdy*df12dr + dsdy*df12ds;

          const dfloat rhsuy   = drdx*df21dr + dsdx*df21ds
                               + drdy*df22dr + dsdy*df22ds;

          const dlong id = e*p_Np*p_NVfields+n;
          // Compute div(uxu)
          RHS[id+0*p_Np] = -rhsux;
          RHS[id+1*p_Np] = -rhsuy;
        }
      }
    }
  }
}


@kernel void insSubcycleAdvectionSurfaceTri2D(const dlong Nelements,
                                    @restrict const  dfloat *  sgeo,
                                    @restrict const  dfloat *  LIFT,
                                    @restrict const  dlong  *  vmapM,
                                    @restrict const  dlong  *  vmapP,
                                    @restrict const  int    *  EToB,
                                    const dfloat time,
                                    @restrict const  dfloat *  x,
                                    @restrict const  dfloat *  y,
                                    @restrict const  dfloat *  z,
                                    const dfloat nu,
                                    @restrict const  dfloat *  Ue,
                                    @restrict const  dfloat *  U,
                                          @restrict  dfloat *  RHS){

  // for all elements
  for(dlong eo=0;eo<Nelements;eo+=p_NblockS;@outer(0)){
    // @shared storage for flux terms
    @shared dfloat s_fluxUx[p_NblockS][p_Nfp*p_Nfaces];
    @shared dfloat s_fluxUy[p_NblockS][p_Nfp*p_Nfaces];

    // for all face nodes of all elements
    for(int es=0;es<p_NblockS;++es;@inner(1)){
      for(int n=0;n<p_maxNodes;++n;@inner(0)){ // maxNodes = max(Nfp*Nfaces,Np)
        const dlong e = eo + es;
        if(e<Nelements && n<p_Nfp*p_Nfaces){
          // find face that owns this node
          const int face = n/p_Nfp;
          // load surface geofactors for this face
          const dlong sid    = p_Nsgeo*(e*p_Nfaces+face);
          const dfloat nx   = sgeo[sid+p_NXID];
          const dfloat ny   = sgeo[sid+p_NYID];
          const dfloat sJ   = sgeo[sid+p_SJID];
          const dfloat invJ = sgeo[sid+p_IJID];

          // indices of negative and positive traces of face node
          const dlong id  = e*p_Nfp*p_Nfaces + n;
          const dlong idM = vmapM[id];
          const dlong idP = vmapP[id];

          // load traces
          const dlong eM = e;
          const dlong eP = idP/p_Np;
          const int vidM = idM%p_Np;
          const int vidP = idP%p_Np;

          const dlong qbaseM = eM*p_Np*p_NVfields + vidM;
          const dlong qbaseP = eP*p_Np*p_NVfields + vidP;

          // load negative and positive trace node values of Ue, V, Pr
          const dfloat  uxM = Ue[qbaseM+0*p_Np], uxP = Ue[qbaseP+0*p_Np];
          const dfloat  uyM = Ue[qbaseM+1*p_Np], uyP = Ue[qbaseP+1*p_Np];

          const dfloat  pxM = U[qbaseM+0*p_Np], pyM = U[qbaseM+1*p_Np];
                dfloat  pxP = U[qbaseP+0*p_Np], pyP = U[qbaseP+1*p_Np];

          // apply boundary condition
          const int bc = EToB[face+p_Nfaces*e];
          if(bc>0) {
            insVelocityDirichletConditions2D(bc, nu, time, x[idM], y[idM], nx, ny, pxM, pyM, &pxP, &pyP);
          }

          // Find max normal velocity on the face
          dfloat unM   = fabs(nx*uxM + ny*uyM);
          dfloat unP   = fabs(nx*uxP + ny*uyP);
          dfloat unMax = (unM > unP) ? unM : unP;

          // evaluate "flux" terms: LLF
          const dfloat sc = invJ * sJ ;
          s_fluxUx[es][n] = sc*(.5f*( nx*(uxP*pxP - uxM*pxM)
                                    + ny*(uyP*pxP - uyM*pxM) + unMax*(pxM-pxP) ));
          s_fluxUy[es][n] = sc*(.5f*( nx*(uxP*pyP - uxM*pyP)
                                    + ny*(uyP*pyP - uyM*pyM) + unMax*(pyM-pyP) ));
        }
      }
    }

    // wait for all flux functions are written to @shared

    // for each node in the element
    for(int es=0;es<p_NblockS;++es;@inner(1)){
      for(int n=0;n<p_maxNodes;++n;@inner(0)){
        const dlong e = eo + es;
        if(e<Nelements && n<p_Np){
          dfloat rhsux = 0.0;
          dfloat rhsuy = 0.0;
          // Lift
          #pragma unroll p_NfacesNfp
            for(int m=0;m<p_Nfaces*p_Nfp;++m){
              const dfloat L = LIFT[n+m*p_Np];
              rhsux  += L*s_fluxUx[es][m];
              rhsuy  += L*s_fluxUy[es][m];
            }

          // M^-1* (div(u*u)) + Lift*(F*-F))
          const dlong id = e*p_Np*p_NVfields + n;
          RHS[id+0*p_Np] -= rhsux;
          RHS[id+1*p_Np] -= rhsuy;
        }
      }
    }
  }
}
