/*

The MIT License (MIT)

Copyright (c) 2017-2022 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/


// compute NU = -div(uxu) in collocation way (weak form)
@kernel void insSubcycleAdvectionVolumeQuad2D(const dlong Nelements,
                                    @restrict const  dfloat *  vgeo,
                                    @restrict const  dfloat *  DT,
                                    @restrict const  dfloat *  Ue,
                                    @restrict const  dfloat *  U,
                                          @restrict  dfloat *  RHS){

  for(dlong eo=0;eo<Nelements;eo+=p_NblockV;@outer(0)){  // for all elements

    @shared dfloat s_F11[p_NblockV][p_Nq][p_Nq];
    @shared dfloat s_F12[p_NblockV][p_Nq][p_Nq];
    @shared dfloat s_F21[p_NblockV][p_Nq][p_Nq];
    @shared dfloat s_F22[p_NblockV][p_Nq][p_Nq];

    @shared dfloat s_DT[p_Nq][p_Nq];

    for(int es=0;es<p_NblockV;++es;@inner(2)){
      for(int j=0;j<p_Nq;++j;@inner(1)){
        for(int i=0;i<p_Nq;++i;@inner(0)){
          const dlong e = eo+es; // element in block
          if(e<Nelements){
            const dlong gid = e*p_Np*p_Nvgeo+ j*p_Nq +i;
            const dfloat drdx = vgeo[gid + p_RXID*p_Np];
            const dfloat drdy = vgeo[gid + p_RYID*p_Np];
            const dfloat dsdx = vgeo[gid + p_SXID*p_Np];
            const dfloat dsdy = vgeo[gid + p_SYID*p_Np];
            const dfloat JW = vgeo[gid + p_JWID*p_Np];

            const dlong id = e*p_Np*p_NVfields + j*p_Nq+i;

            const dfloat Un = Ue[id+0*p_Np];
            const dfloat Vn = Ue[id+1*p_Np];
            const dfloat Udn = U[id+0*p_Np];
            const dfloat Vdn = U[id+1*p_Np];

            const dfloat cUn = JW*(drdx*Un+drdy*Vn);
            const dfloat cVn = JW*(dsdx*Un+dsdy*Vn);

            s_F11[es][j][i] = cUn*Udn;
            s_F12[es][j][i] = cVn*Udn;
            s_F21[es][j][i] = cUn*Vdn;
            s_F22[es][j][i] = cVn*Vdn;

            if (es==0)
              s_DT[j][i] = DT[j*p_Nq+i];
          }
        }
      }
    }

    // Make sure all node data is loaded into @shared

    for(int es=0;es<p_NblockV;++es;@inner(2)){
      for(int j=0;j<p_Nq;++j;@inner(1)){
        for(int i=0;i<p_Nq;++i;@inner(0)){
          const dlong e = eo+es;
          if(e<Nelements){
            const dlong gid = e*p_Np*p_Nvgeo+ j*p_Nq +i;
            const dfloat invJW = vgeo[gid + p_IJWID*p_Np];
            dfloat nu = 0.f, nv = 0.f;

            #pragma unroll p_Nq
              for(int n=0;n<p_Nq;++n){
                const dfloat Dr = s_DT[n][i];
                const dfloat Ds = s_DT[n][j];

                nu += Dr*s_F11[es][j][n]
                     +Ds*s_F12[es][n][i];

                nv += Dr*s_F21[es][j][n]
                     +Ds*s_F22[es][n][i];
              }

            const dlong id = e*p_Np*p_NVfields + j*p_Nq + i;
            RHS[id+0*p_Np] = invJW*nu;
            RHS[id+1*p_Np] = invJW*nv;
          }
        }
      }
    }
  }
}


#define surfaceTerms(sk,face,i, j)                                      \
  {                                                                     \
  const dlong  idM = vmapM[sk];                                         \
  const dlong  idP = vmapP[sk];                                         \
                                                                        \
  const dfloat nx = sgeo[sk*p_Nsgeo+p_NXID];                            \
  const dfloat ny = sgeo[sk*p_Nsgeo+p_NYID];                            \
  const dfloat sJ = sgeo[sk*p_Nsgeo+p_SJID];                            \
  const dfloat invWJ = sgeo[sk*p_Nsgeo+p_WIJID];                        \
                                                                        \
  const dlong eM = e;                                                   \
  const dlong eP = idP/p_Np;                                            \
  const int vidM = idM%p_Np;                                            \
  const int vidP = idP%p_Np;                                            \
                                                                        \
  const dlong qbaseM = eM*p_Np*p_NVfields + vidM;                       \
  const dlong qbaseP = eP*p_Np*p_NVfields + vidP;                       \
                                                                        \
  const dfloat uM = Ue[qbaseM+0*p_Np], vM = Ue[qbaseM+1*p_Np];          \
  const dfloat uP = Ue[qbaseP+0*p_Np], vP = Ue[qbaseP+1*p_Np];          \
  const dfloat udM = U[qbaseM+0*p_Np], vdM = U[qbaseM+1*p_Np];          \
        dfloat udP = U[qbaseP+0*p_Np], vdP = U[qbaseP+1*p_Np];          \
                                                                        \
  const int bc = EToB[face+p_Nfaces*e];                                 \
  if(bc>0) {                                                            \
    insVelocityDirichletConditions2D(bc, nu, time, x[idM], y[idM], nx, ny, udM, vdM, &udP, &vdP);\
  }                                                                     \
                                                                        \
  dfloat unM   = fabs(nx*uM + ny*vM);                                   \
  dfloat unP   = fabs(nx*uP + ny*vP);                                   \
  dfloat unMax = (unM > unP) ? unM : unP;                               \
                                                                        \
  const dfloat sc = invWJ * sJ;                                         \
  s_fluxNU[es][j][i] += sc*(.5f*(nx*(uP*udP + uM*udM)                   \
                               + ny*(vP*udP + vM*udM)  + unMax*(udM-udP) ));\
  s_fluxNV[es][j][i] += sc*(.5f*(nx*(uP*vdP + uM*vdM)                   \
                               + ny*(vP*vdP + vM*vdM)  + unMax*(vdM-vdP) ));\
  }

@kernel void insSubcycleAdvectionSurfaceQuad2D(const dlong Nelements,
                                    @restrict const  dfloat *  sgeo,
                                    @restrict const  dfloat *  LIFT,
                                    @restrict const  dlong  *  vmapM,
                                    @restrict const  dlong  *  vmapP,
                                    @restrict const  int    *  EToB,
                                    const dfloat time,
                                    @restrict const  dfloat *  x,
                                    @restrict const  dfloat *  y,
                                    @restrict const  dfloat *  z,
                                    const dfloat nu,
                                    @restrict const  dfloat *  Ue,
                                    @restrict const  dfloat *  U,
                                          @restrict  dfloat *  RHS){

  // for all elements
  for(dlong eo=0;eo<Nelements;eo+=p_NblockS;@outer(0)){
    // @shared storage for flux terms
    @shared dfloat s_fluxNU[p_NblockS][p_Nq][p_Nq];
    @shared dfloat s_fluxNV[p_NblockS][p_Nq][p_Nq];

    for(int es=0;es<p_NblockS;++es;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        #pragma unroll p_Nq
        for(int j=0;j<p_Nq;++j){
          s_fluxNU[es][j][i] = 0.;
          s_fluxNV[es][j][i] = 0.;
        }
      }
    }


    // for all face nodes of all elements
    // face 0 & 2
    for(int es=0;es<p_NblockS;++es;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        const dlong e = eo + es;
        if(e<Nelements){
          const dlong sk0 = e*p_Nfp*p_Nfaces + 0*p_Nfp + i;
          const dlong sk2 = e*p_Nfp*p_Nfaces + 2*p_Nfp + i;

          surfaceTerms(sk0,0,i,0     );
          surfaceTerms(sk2,2,i,p_Nq-1);
        }
      }
    }


    // face 1 & 3
    for(int es=0;es<p_NblockS;++es;@inner(1)){
      for(int j=0;j<p_Nq;++j;@inner(0)){
        const dlong e = eo + es;
        if(e<Nelements){
          const dlong sk1 = e*p_Nfp*p_Nfaces + 1*p_Nfp + j;
          const dlong sk3 = e*p_Nfp*p_Nfaces + 3*p_Nfp + j;

          surfaceTerms(sk1,1,p_Nq-1,j);
          surfaceTerms(sk3,3,0     ,j);
        }
      }
    }


    // for each node in the element
    for(int es=0;es<p_NblockS;++es;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        const dlong e = eo + es;
        if(e<Nelements){
          #pragma unroll p_Nq
          for(int j=0;j<p_Nq;++j){
            const dlong id = e*p_Np*p_NVfields + j*p_Nq + i;

            RHS[id+0*p_Np] -= s_fluxNU[es][j][i];
            RHS[id+1*p_Np] -= s_fluxNV[es][j][i];
          }
        }
      }
    }
  }
}
