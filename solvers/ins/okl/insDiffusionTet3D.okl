/*

The MIT License (MIT)

Copyright (c) 2017-2022 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/



@kernel void insDiffusionTet3D(const dlong Nelements,
                                @restrict const  dlong  *  elementList,
                                @restrict const  dfloat *  vgeo,
                                @restrict const  dfloat *  sgeo,
                                @restrict const  dfloat *  D,
                                @restrict const  dfloat *  LIFT,
                                @restrict const  dlong  *  vmapM,
                                @restrict const  dlong  *  vmapP,
                                @restrict const  int    *  EToB,
                                const dfloat tau,
                                const dfloat time,
                                @restrict const  dfloat *  x,
                                @restrict const  dfloat *  y,
                                @restrict const  dfloat *  z,
                                const dfloat nu,
                                const dfloat alpha,
                                const dfloat beta,
                                @restrict const  dfloat4 *  GU,
                                      @restrict  dfloat  *  RHS){

  for(dlong e=0;e<Nelements;++e;@outer(0)){
    @shared  dfloat s_dqdx[p_Np];
    @shared  dfloat s_dqdy[p_Np];
    @shared  dfloat s_dqdz[p_Np];
    @shared  dfloat s_nxdq[p_NfacesNfp];
    @shared  dfloat s_nydq[p_NfacesNfp];
    @shared  dfloat s_nzdq[p_NfacesNfp];
    @shared  dfloat s_lapflux[p_NfacesNfp];
    @shared  dfloat s_Lnxdq[p_Np];
    @shared  dfloat s_Lnydq[p_Np];
    @shared  dfloat s_Lnzdq[p_Np];
    @exclusive dlong element;
    @exclusive dlong idM;
    @exclusive dfloat nx, ny, nz, sJ, invJ, hinv;

    //#pragma unroll p_NVfields
    for (int fld=0; fld<p_NVfields; fld++) {


      for(int n=0;n<p_maxNodes;++n;@inner(0)){
        element = elementList[e];
        if(n<p_Np){
          // assume that this stores (qx, qy, qz, q) as dfloat4
          const dfloat4 gradqn = GU[element*p_Np*p_NVfields+n + fld*p_Np];

          s_dqdx[n] = gradqn.x;
          s_dqdy[n] = gradqn.y;
          s_dqdz[n] = gradqn.z;
        }

        if(n<p_NfacesNfp){
          const dlong id  = n + element*p_Nfaces*p_Nfp;
          idM = vmapM[id];
          const dlong idP = vmapP[id];

          const dlong eM = element;
          const dlong eP = idP/p_Np;
          const int vidM = idM%p_Np;
          const int vidP = idP%p_Np;

          const dlong qbaseM = eM*p_Np*p_NVfields + vidM;
          const dlong qbaseP = eP*p_Np*p_NVfields + vidP;

          // find face that owns this node
          const int face = n/p_Nfp;

          const dfloat4 gradqM = GU[qbaseM+fld*p_Np];// could fetch from @shared after barrier
                dfloat4 gradqP = GU[qbaseP+fld*p_Np];

          // load surface geofactors for this face
          const dlong sid = p_Nsgeo*(element*p_Nfaces+face);
          nx = sgeo[sid+p_NXID];
          ny = sgeo[sid+p_NYID];
          nz = sgeo[sid+p_NZID];
          sJ = sgeo[sid+p_SJID];
          invJ = sgeo[sid+p_IJID];
          hinv = sgeo[sid+p_IHID];

          const int bc = EToB[face+p_Nfaces*element];
          if(bc>0) {
            dfloat4 UM[p_NVfields];
            dfloat4 UP[p_NVfields];

            //set all except field i zero. This assumes velocity boundaries are uncoupled
            for (int f=0;f<p_NVfields;f++) {
              UM[f].x = 0.;
              UM[f].y = 0.;
              UM[f].z = 0.;
              UM[f].w = 0.;
            }
            UM[fld] = gradqM;

            insVelocityDirichletConditions3D(bc, nu,time, x[idM], y[idM], z[idM], nx, ny, nz, UM[0].w, UM[1].w, UM[2].w, &(UP[0].w), &(UP[1].w), &(UP[2].w));
            insVelocityNeumannConditions3D(bc, nu,time, x[idM], y[idM], z[idM], nx, ny, nz, UM[0].x, UM[0].y, UM[0].z, \\
                                                                                         UM[1].x, UM[1].y, UM[1].z, \\
                                                                                         UM[2].x, UM[2].y, UM[2].z, \\
                                                                                         &(UP[0].x), &(UP[0].y), &(UP[0].z), \\
                                                                                         &(UP[1].x), &(UP[1].y), &(UP[1].z), \\
                                                                                         &(UP[2].x), &(UP[2].y), &(UP[2].z));

            gradqP.x = 2.*UP[fld].x - gradqM.x;
            gradqP.y = 2.*UP[fld].y - gradqM.y;
            gradqP.z = 2.*UP[fld].z - gradqM.z;
            gradqP.w = 2.*UP[fld].w - gradqM.w;
          }

          const dfloat dq = gradqP.w - gradqM.w;
          const dfloat half = 0.5f;

          s_nxdq[n] = half*sJ*invJ*nx*dq;
          s_nydq[n] = half*sJ*invJ*ny*dq;
          s_nzdq[n] = half*sJ*invJ*nz*dq;

          s_lapflux[n] = half*sJ*invJ*(-nx*(gradqP.x-gradqM.x)
                                       -ny*(gradqP.y-gradqM.y)
                                       -nz*(gradqP.z-gradqM.z)
                                       -tau*hinv*dq);
        }
      }


      // dqdx += LIFT*(sJ/J)*nx*dq
      for(int n=0;n<p_maxNodes;++n;@inner(0)){

        if(n<p_Np){
          const dlong gid = element*p_Nvgeo;
          const dfloat drdx = vgeo[gid + p_RXID];
          const dfloat drdy = vgeo[gid + p_RYID];
          const dfloat drdz = vgeo[gid + p_RZID];
          const dfloat dsdx = vgeo[gid + p_SXID];
          const dfloat dsdy = vgeo[gid + p_SYID];
          const dfloat dsdz = vgeo[gid + p_SZID];
          const dfloat dtdx = vgeo[gid + p_TXID];
          const dfloat dtdy = vgeo[gid + p_TYID];
          const dfloat dtdz = vgeo[gid + p_TZID];

          dfloat Lnxdq = 0;
          dfloat Lnydq = 0;
          dfloat Lnzdq = 0;

          //#pragma unroll p_NfacesNfp
            for(int i=0;i<p_NfacesNfp;++i){
              Lnxdq += LIFT[n+i*p_Np]*s_nxdq[i];
              Lnydq += LIFT[n+i*p_Np]*s_nydq[i];
              Lnzdq += LIFT[n+i*p_Np]*s_nzdq[i];
            }

          dfloat dqdx = s_dqdx[n] + Lnxdq;
          dfloat dqdy = s_dqdy[n] + Lnydq;
          dfloat dqdz = s_dqdz[n] + Lnzdq;

          s_dqdx[n] = drdx*dqdx + drdy*dqdy + drdz*dqdz; // abuse of notation
          s_dqdy[n] = dsdx*dqdx + dsdy*dqdy + dsdz*dqdz;
          s_dqdz[n] = dtdx*dqdx + dtdy*dqdy + dtdz*dqdz;

          s_Lnxdq[n] = Lnxdq;
          s_Lnydq[n] = Lnydq;
          s_Lnzdq[n] = Lnzdq;
        }
      }


      for(int n=0;n<p_maxNodes;++n;@inner(0)){
        if(n<p_NfacesNfp){
          int id = (int) (idM%p_Np);
          s_lapflux[n] += sJ*invJ*(nx*s_Lnxdq[id]+ny*s_Lnydq[id]+nz*s_Lnzdq[id]);
        }
      }


      for(int n=0;n<p_maxNodes;++n;@inner(0)){
        if(n<p_Np){
          dfloat LUn = 0;
          dfloat lapr = 0, laps = 0, lapt = 0;

          #pragma unroll p_Np
          for(int i=0;i<p_Np;++i){
            lapr += D[n+i*p_Np+0*p_Np*p_Np]*s_dqdx[i];
            laps += D[n+i*p_Np+1*p_Np*p_Np]*s_dqdy[i];
            lapt += D[n+i*p_Np+2*p_Np*p_Np]*s_dqdz[i];
          }

          LUn = -(lapr+laps+lapt);

          // lift remaining surface terms
          #pragma unroll p_NfacesNfp
          for(int i=0;i<p_NfacesNfp;++i){
            LUn += LIFT[n+i*p_Np]*s_lapflux[i];
          }

          const dlong id = n+element*p_Np*p_NVfields+i*p_Np;
          if (beta!=0) {
            RHS[id] = beta*RHS[id] - nu*alpha*LUn;
          } else {
            RHS[id] = -nu*alpha*LUn;
          }
        }
      }
    }
  }
}
