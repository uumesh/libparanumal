/*

The MIT License (MIT)

Copyright (c) 2017-2022 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

// compute RHS = MM*RHS/gamma + BCdata
@kernel void insPressureRhsTri2D(const dlong Nelements,
                               @restrict const  dfloat *  wJ,
                               @restrict const  dfloat *  vgeo,
                               @restrict const  dfloat *  sgeo,
                               @restrict const  dfloat *  ggeo,
                               @restrict const  dfloat *  S,
                               @restrict const  dfloat *  D,
                               @restrict const  dfloat *  LIFT,
                               @restrict const  dfloat *  MM,
                               @restrict const  dfloat *  sM,
                               @restrict const  dlong  *  vmapM,
                               @restrict const  int    *  EToB,
                               @restrict const  int    *  mapB,
                               const dfloat tau,
                               const dfloat time,
                               @restrict const  dfloat *  x,
                               @restrict const  dfloat *  y,
                               @restrict const  dfloat *  z,
                               const dfloat nu,
                               const dfloat gamma,
                               @restrict        dfloat *  RHS){

  for(int e=0;e<Nelements;e++;@outer(0)){
    @shared dfloat s_p[p_Np];
    @shared dfloat s_ndp[p_Nfp*p_Nfaces];

    @exclusive dfloat r_rhsP;

    for(int n=0;n<p_maxNodes;++n;@inner(0)){
      if(n<p_Np){
        s_p[n] = 0.;
      }
      if(n<p_NfacesNfp){
        s_ndp[n] = 0.;
      }
    }


    for(int n=0;n<p_maxNodes;++n;@inner(0)){
      if(n<p_NfacesNfp){
        const int id  = n + e*p_Nfaces*p_Nfp;
        const int idM = vmapM[id];
        const int nid = idM%p_Np;

        const int face = n/p_Nfp;

        // load surface geofactors for this face
        const int sid = p_Nsgeo*(e*p_Nfaces+face);
        const dfloat nx = sgeo[sid+p_NXID];
        const dfloat ny = sgeo[sid+p_NYID];
        const dfloat sJ = sgeo[sid+p_SJID];

        dfloat dpdxP=0, dpdyP=0, pP=0;

        const int bc = mapB[idM];
        if(bc>0) {
          insPressureDirichletConditions2D(bc,nu,time, x[idM], y[idM], nx, ny, 0.f, &pP);
          insPressureNeumannConditions2D(bc,nu,time, x[idM], y[idM], nx, ny, 0.f, 0.f, &dpdxP, &dpdyP);
        }

        s_p[nid] = pP;
        s_ndp[n] = sJ*(nx*dpdxP + ny*dpdyP);
      }
    }


    for(int n=0;n<p_maxNodes;++n;@inner(0)){
      if(n<p_Np){
        //volume Dirichlet data
        const int gid = e*p_Nggeo;
        const dfloat Grr = ggeo[gid + p_G00ID];
        const dfloat Grs = ggeo[gid + p_G01ID];
        const dfloat Gss = ggeo[gid + p_G11ID];

        dfloat prr = 0.;
        dfloat prs = 0.;
        dfloat pss = 0.;
        #pragma unroll p_Np
          for (int k=0;k<p_Np;k++) {
            prr += S[n+k*p_Np+0*p_Np*p_Np]*s_p[k];
            prs += S[n+k*p_Np+1*p_Np*p_Np]*s_p[k];
            pss += S[n+k*p_Np+2*p_Np*p_Np]*s_p[k];
          }

        dfloat Lndp = 0;
        // surface mass * surface terms
        #pragma unroll p_NfacesNfp
          for(int i=0;i<p_NfacesNfp;++i){
            Lndp += sM[n+i*p_Np]*s_ndp[i];
          }

        r_rhsP = -(Grr*prr+Grs*prs+Gss*pss - Lndp);
      }
    }


    for(int n=0;n<p_maxNodes;++n;@inner(0)){
      if(n<p_Np){
        //load RHS
        const int id = n + e*p_Np;
        s_p[n] = RHS[id]/gamma;
      }
    }


    for(int n=0;n<p_maxNodes;++n;@inner(0)){
      if(n<p_Np){
        const dfloat J = wJ[e];

        dfloat Mp=0.0;

        #pragma unroll p_Np
        for (int k=0;k<p_Np;k++) {
          Mp += MM[n+k*p_Np]*s_p[k];
        }

        const int id = n + e*p_Np;
        RHS[id] = J*Mp + r_rhsP;
      }
    }
  }
}

// compute RHS = MM*RHS/gamma + BCdata
@kernel void insPressureIpdgRhsTri2D(const dlong Nelements,
                               @restrict const  dfloat *  wJ,
                               @restrict const  dfloat *  vgeo,
                               @restrict const  dfloat *  sgeo,
                               @restrict const  dfloat *  ggeo,
                               @restrict const  dfloat *  S,
                               @restrict const  dfloat *  D,
                               @restrict const  dfloat *  LIFT,
                               @restrict const  dfloat *  MM,
                               @restrict const  dfloat *  sM,
                               @restrict const  dlong  *  vmapM,
                               @restrict const  int    *  EToB,
                               @restrict const  int    *  mapB,
                               const dfloat tau,
                               const dfloat time,
                               @restrict const  dfloat *  x,
                               @restrict const  dfloat *  y,
                               @restrict const  dfloat *  z,
                               const dfloat nu,
                               const dfloat gamma,
                               @restrict        dfloat *  RHS){

  for(dlong e=0;e<Nelements;++e;@outer(0)){
    @shared  dfloat s_dpdx[p_Np];
    @shared  dfloat s_dpdy[p_Np];
    @shared  dfloat s_lapp[p_Np];

    @shared  dfloat s_nxdp[p_NfacesNfp];
    @shared  dfloat s_nydp[p_NfacesNfp];

    @shared  dfloat s_lappflux[p_NfacesNfp];
    @shared  dfloat s_Lnxdp[p_Np];
    @shared  dfloat s_Lnydp[p_Np];

    @exclusive dlong idM;
    @exclusive dfloat nx, ny, sJ, invJ, hinv;

    for(int n=0;n<p_maxNodes;++n;@inner(0)){
      if(n<p_NfacesNfp){
        const dlong id  = n + e*p_Nfaces*p_Nfp;
        idM = vmapM[id];
        const int face = n/p_Nfp;

        // load surface geofactors for this face
        const dlong sid = p_Nsgeo*(e*p_Nfaces+face);
        nx = sgeo[sid+p_NXID];
        ny = sgeo[sid+p_NYID];
        sJ = sgeo[sid+p_SJID];
        invJ = sgeo[sid+p_IJID];
        hinv = sgeo[sid+p_IHID];

        dfloat dpdxP=0, dpdyP=0, pP=0;

        const int bc = EToB[face+p_Nfaces*e];
        if(bc>0) {
          insPressureDirichletConditions2D(bc,nu,time, x[idM], y[idM], nx, ny, 0.f, &pP);
          insPressureNeumannConditions2D(bc,nu,time, x[idM], y[idM], nx, ny, 0.f, 0.f, &dpdxP, &dpdyP);
        }

        const dfloat dp = pP;
        s_nxdp[n] = sJ*invJ*nx*dp;
        s_nydp[n] = sJ*invJ*ny*dp;
        s_lappflux[n] = sJ*invJ*(-nx*(dpdxP)-ny*(dpdyP) -tau*hinv*dp);
      }
    }


    // dpdx += LIFT*(sJ/J)*nx*dp
    for(int n=0;n<p_maxNodes;++n;@inner(0)){
      if(n<p_Np){
        const dlong gid = e*p_Nvgeo;
        const dfloat drdx = vgeo[gid + p_RXID];
        const dfloat drdy = vgeo[gid + p_RYID];
        const dfloat dsdx = vgeo[gid + p_SXID];
        const dfloat dsdy = vgeo[gid + p_SYID];

        dfloat Lnxdp = 0.f;
        dfloat Lnydp = 0.f;

        #pragma unroll p_NfacesNfp
          for(int i=0;i<p_NfacesNfp;++i){
            Lnxdp += LIFT[n+i*p_Np]*s_nxdp[i];
            Lnydp += LIFT[n+i*p_Np]*s_nydp[i];
          }

        const dfloat dpdx = Lnxdp;
        const dfloat dpdy = Lnydp;

        s_dpdx[n] = drdx*dpdx + drdy*dpdy; // abuse of notation
        s_dpdy[n] = dsdx*dpdx + dsdy*dpdy;

        s_Lnxdp[n] = Lnxdp;
        s_Lnydp[n] = Lnydp;
      }
    }


    for(int n=0;n<p_maxNodes;++n;@inner(0)){
      if(n<p_NfacesNfp){
        const int id = idM%p_Np;
        s_lappflux[n] += sJ*invJ*(nx*s_Lnxdp[id]+ny*s_Lnydp[id]);
      }

      if(n<p_Np){
        dfloat lasr = 0.f, lass = 0.f;

        #pragma unroll p_Np
        for(int i=0;i<p_Np;++i) {
          const dfloat Drn = D[n+i*p_Np+0*p_Np*p_Np];
          const dfloat Dsn = D[n+i*p_Np+1*p_Np*p_Np];
          lasr += Drn*s_dpdx[i];
          lass += Dsn*s_dpdy[i];
        }

        //fetch RHS value and add volume terms
        const dlong id = e*p_Np+n;
        s_lapp[n] = RHS[id]/gamma + (lasr+lass);
      }
    }


    for(int n=0;n<p_maxNodes;++n;@inner(0)){
      if(n<p_Np){
        dfloat las = 0;

        // lift remaining surface terms
        #pragma unroll p_NfacesNfp
          for(int i=0;i<p_NfacesNfp;++i){
            las += LIFT[n+i*p_Np]*s_lappflux[i];
          }
        s_lapp[n] -= las;
      }
    }


    for(int n=0;n<p_maxNodes;++n;@inner(0)){
      if(n<p_Np){
        const dfloat J = wJ[e];

        dfloat Mlaps = 0.f;
        // multiply by mass matrix
        #pragma unroll p_Np
        for(int i=0;i<p_Np;++i){
          Mlaps += MM[n+i*p_Np]*s_lapp[i];
        }

        const dlong id = e*p_Np+n;
        RHS[id] = J*Mlaps;
      }
    }
  }
}

// enter BCs if C0
@kernel void insPressureBCTri2D(const dlong Nelements,
                               @restrict const  dfloat *  sgeo,
                               @restrict const  dlong  *  vmapM,
                               @restrict const  int    *  mapB,
                               const dfloat time,
                               @restrict const  dfloat *  x,
                               @restrict const  dfloat *  y,
                               @restrict const  dfloat *  z,
                               const dfloat nu,
                               @restrict        dfloat *  P){

  for(dlong e=0;e<Nelements;e++;@outer(0)){
    for(int n=0;n<p_NfacesNfp;++n;@inner(0)){
      const dlong idM = vmapM[e*p_Nfp*p_Nfaces + n];
      const int bc = mapB[idM];

      if(bc>0) {
        const int face = n/p_Nfp;
        const dlong sid = p_Nsgeo*(e*p_Nfaces+face);
        const dfloat nx = sgeo[sid+p_NXID];
        const dfloat ny = sgeo[sid+p_NYID];

        const dfloat pM = P[idM];
        dfloat pP = 0.f;
        insPressureDirichletConditions2D(bc,nu,time, x[idM], y[idM], nx, ny, pM, &pP);
        P[idM] = pP;
      }
    }
  }
}
