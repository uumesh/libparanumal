/*

The MIT License (MIT)

Copyright (c) 2017-2022 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

#define surfaceTerms(sk,m,i,j)                                          \
{                                                                       \
  const dlong idM = vmapM[sk];                                          \
  const dfloat nx = sgeo[sk*p_Nsgeo+p_NXID];                            \
  const dfloat ny = sgeo[sk*p_Nsgeo+p_NYID];                            \
  const dfloat nz = sgeo[sk*p_Nsgeo+p_NZID];                            \
  const dfloat WsJ = sgeo[sk*p_Nsgeo+p_WSJID];                          \
                                                                        \
  dfloat dpdxP=0.f, dpdyP=0.f, dpdzP=0.f, pP=0.f;                       \
  const int bc = mapB[idM];                                             \
  if(bc>0) {                                                            \
    insPressureDirichletConditions3D(bc,nu,time, x[idM], y[idM], z[idM], nx, ny, nz, 0.f, &pP); \
    insPressureNeumannConditions3D(bc,nu,time, x[idM], y[idM], z[idM], nx, ny, nz, 0.f, 0.f,0.f, &dpdxP, &dpdyP, &dpdzP); \
  }                                                                     \
                                                                        \
  s_p  [m][j][i] = pP;                                                  \
  s_ndp[m][j][i] = -WsJ*(nx*dpdxP + ny*dpdyP + nz*dpdzP);               \
}

// compute RHS = MM*RHS/gamma + BCdata
@kernel void insPressureRhsHex3D(const dlong Nelements,
                               @restrict const  dfloat *  wJ,
                               @restrict const  dfloat *  vgeo,
                               @restrict const  dfloat *  sgeo,
                               @restrict const  dfloat *  ggeo,
                               @restrict const  dfloat *  S,
                               @restrict const  dfloat *  DT,
                               @restrict const  dfloat *  LIFT,
                               @restrict const  dfloat *  MM,
                               @restrict const  dfloat *  sM,
                               @restrict const  dlong  *  vmapM,
                               @restrict const  int    *  EToB,
                               @restrict const  int    *  mapB,
                               const dfloat tau,
                               const dfloat time,
                               @restrict const  dfloat *  x,
                               @restrict const  dfloat *  y,
                               @restrict const  dfloat *  z,
                               const dfloat nu,
                               const dfloat gamma,
                               @restrict        dfloat *  RHS){

  for(dlong e=0; e<Nelements; ++e; @outer(0)){

    @shared dfloat s_DT[p_Nq][p_Nq];
    @shared dfloat s_p[2][p_Nq][p_Nq];
    @shared dfloat s_ndp[2][p_Nq][p_Nq];

    @exclusive dfloat r_pt, r_Gpt, r_Apk;
    @exclusive dfloat r_p[p_Nq]; // register array to hold u(i,j,0:N) private to thread
    @exclusive dfloat r_rhs[p_Nq];// array for results Au(i,j,0:N)

    @exclusive dfloat r_G00, r_G01, r_G02, r_G11, r_G12, r_G22;

    // for all face nodes of all elements
    // face 0 & 5
    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        //load DT into local memory
        // s_DT[i][j] = d \phi_i at node j
        s_DT[j][i] = DT[p_Nq*j+i]; // DT is column major

        #pragma unroll p_Nq
        for(int k=0;k<p_Nq;++k){
          r_p[k] = 0.;
          r_rhs[k] = 0.;
        }

        const dlong sk0 = e*p_Nfp*p_Nfaces + 0*p_Nfp + i + j*p_Nq;
        const dlong sk5 = e*p_Nfp*p_Nfaces + 5*p_Nfp + i + j*p_Nq;
        surfaceTerms(sk0,0,i,j);
        surfaceTerms(sk5,1,i,j);
      }
    }


    // face 0 & 5
    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        //face 0
        r_p[0] = s_p[0][j][i];
        r_rhs[0] += s_ndp[0][j][i];

        //face 5
        r_p[p_Nq-1] = s_p[1][j][i];
        r_rhs[p_Nq-1] += s_ndp[1][j][i];
      }
    }


    // face 1 & 3
    for(int k=0;k<p_Nq;++k;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        const dlong sk1 = e*p_Nfp*p_Nfaces + 1*p_Nfp + i + k*p_Nq;
        const dlong sk3 = e*p_Nfp*p_Nfaces + 3*p_Nfp + i + k*p_Nq;
        surfaceTerms(sk1,0,i,k);
        surfaceTerms(sk3,1,i,k);
      }
    }


    // face 1 & 3
    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        if (j==0) {//face 1
          #pragma unroll p_Nq
          for (int k=0;k<p_Nq;k++) {
            r_p[k] = s_p[0][k][i];
            r_rhs[k] += s_ndp[0][k][i];
          }
        }
        if (j==p_Nq-1) {//face 3
          #pragma unroll p_Nq
          for (int k=0;k<p_Nq;k++) {
            r_p[k] = s_p[1][k][i];
            r_rhs[k] += s_ndp[1][k][i];
          }
        }
      }
    }


    // face 2 & 4
    for(int k=0;k<p_Nq;++k;@inner(1)){
      for(int j=0;j<p_Nq;++j;@inner(0)){
        const dlong sk2 = e*p_Nfp*p_Nfaces + 2*p_Nfp + j + k*p_Nq;
        const dlong sk4 = e*p_Nfp*p_Nfaces + 4*p_Nfp + j + k*p_Nq;
        surfaceTerms(sk2,0,j,k);
        surfaceTerms(sk4,1,j,k);
      }
    }


    // face 2 & 4
    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        if (i==p_Nq-1) {//face 2
          #pragma unroll p_Nq
          for (int k=0;k<p_Nq;k++) {
            r_p[k] = s_p[0][k][j];
            r_rhs[k] += s_ndp[0][k][j];
          }
        }
        if (i==0) {//face 4
          #pragma unroll p_Nq
          for (int k=0;k<p_Nq;k++) {
            r_p[k] = s_p[1][k][j];
            r_rhs[k] += s_ndp[1][k][j];
          }
        }
      }
    }


    // Layer by layer
    #pragma unroll p_Nq
      for(int k = 0;k < p_Nq; k++){
        for(int j=0;j<p_Nq;++j;@inner(1)){
          for(int i=0;i<p_Nq;++i;@inner(0)){

            // prefetch geometric factors
            const dlong gbase = e*p_Nggeo*p_Np + k*p_Nq*p_Nq + j*p_Nq + i;
            r_G00 = ggeo[gbase+p_G00ID*p_Np];
            r_G01 = ggeo[gbase+p_G01ID*p_Np];
            r_G02 = ggeo[gbase+p_G02ID*p_Np];

            r_G11 = ggeo[gbase+p_G11ID*p_Np];
            r_G12 = ggeo[gbase+p_G12ID*p_Np];
            r_G22 = ggeo[gbase+p_G22ID*p_Np];
          }
        }


        for(int j=0;j<p_Nq;++j;@inner(1)){
          for(int i=0;i<p_Nq;++i;@inner(0)){

            // share u(:,:,k)
            s_p[0][j][i] = r_p[k];
            r_pt = 0;

            #pragma unroll p_Nq
              for(int m = 0; m < p_Nq; m++) {
                r_pt += s_DT[k][m]*r_p[m];
              }
          }
        }


        for(int j=0;j<p_Nq;++j;@inner(1)){
          for(int i=0;i<p_Nq;++i;@inner(0)){

            dfloat qr = 0.f;
            dfloat qs = 0.f;

            #pragma unroll p_Nq
              for(int m = 0; m < p_Nq; m++) {
                qr += s_DT[i][m]*s_p[0][j][m];
                qs += s_DT[j][m]*s_p[0][m][i];
              }

            //reuse the s_ndp array
            s_ndp[0][j][i] = (r_G01*qr + r_G11*qs + r_G12*r_pt);
            s_ndp[1][j][i] = (r_G00*qr + r_G01*qs + r_G02*r_pt);

            // put this here for a performance bump
            r_Gpt = (r_G02*qr + r_G12*qs + r_G22*r_pt);
            r_Apk = 0.0;
          }
        }


        for(int j=0;j<p_Nq;++j;@inner(1)){
          for(int i=0;i<p_Nq;++i;@inner(0)){

            #pragma unroll p_Nq
              for(int m = 0; m < p_Nq; m++){
                r_Apk    += s_DT[m][j]*s_ndp[0][m][i];
                r_rhs[m] += s_DT[k][m]*r_Gpt; // DT(m,k)*ut(i,j,k,e)
                r_Apk    += s_DT[m][i]*s_ndp[1][j][m];
              }

            r_rhs[k] += r_Apk;
          }
        }
      }

    // write out
    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        #pragma unroll p_Nq
        for(int k = 0; k < p_Nq; k++){
          const dfloat JW = wJ[i + j*p_Nq + k*p_Nq*p_Nq + e*p_Np];

          const dlong id = e*p_Np +k*p_Nq*p_Nq+ j*p_Nq + i;
          RHS[id] = JW*RHS[id]/gamma - r_rhs[k];
        }
      }
    }
  }
}
#undef surfaceTerms

#define surfaceTerms(sk,face,m,i,j)                                     \
  {                                                                     \
  const dfloat nx = sgeo[sk*p_Nsgeo+p_NXID];                            \
  const dfloat ny = sgeo[sk*p_Nsgeo+p_NYID];                            \
  const dfloat nz = sgeo[sk*p_Nsgeo+p_NZID];                            \
  const dfloat WsJ = sgeo[sk*p_Nsgeo+p_WSJID];                          \
  const dfloat hinv= sgeo[sk*p_Nsgeo+p_IHID];                           \
                                                                        \
  dfloat dpdxP=0.f, dpdyP=0.f, dpdzP=0.f, pP=0.f;                       \
  const int bc = EToB[face+p_Nfaces*e];                                 \
  if(bc>0) {                                                            \
    const dlong idM = vmapM[sk];                                        \
    insPressureDirichletConditions3D(bc,nu,time, x[idM], y[idM], z[idM], nx, ny, nz, 0.f, &pP); \
    insPressureNeumannConditions3D(bc,nu,time, x[idM], y[idM], z[idM], nx, ny, nz, 0.f, 0.f,0.f, &dpdxP, &dpdyP, &dpdzP); \
  }                                                                     \
                                                                        \
  const dfloat dp = pP;                                                 \
  s_dpdx[m][j][i] = WsJ*nx*dp;                                          \
  s_dpdy[m][j][i] = WsJ*ny*dp;                                          \
  s_dpdz[m][j][i] = WsJ*nz*dp;                                          \
  s_rhsp[m][j][i] = -WsJ*(nx*dpdxP + ny*dpdyP + nz*dpdzP + tau*dp*hinv);\
  }

// compute RHS = MM*RHS/gamma + BCdata
@kernel void insPressureIpdgRhsHex3D(const dlong Nelements,
                               @restrict const  dfloat *  wJ,
                               @restrict const  dfloat *  vgeo,
                               @restrict const  dfloat *  sgeo,
                               @restrict const  dfloat *  ggeo,
                               @restrict const  dfloat *  S,
                               @restrict const  dfloat *  DT,
                               @restrict const  dfloat *  LIFT,
                               @restrict const  dfloat *  MM,
                               @restrict const  dfloat *  sM,
                               @restrict const  dlong  *  vmapM,
                               @restrict const  int    *  EToB,
                               @restrict const  int    *  mapB,
                               const dfloat tau,
                               const dfloat time,
                               @restrict const  dfloat *  x,
                               @restrict const  dfloat *  y,
                               @restrict const  dfloat *  z,
                               const dfloat nu,
                               const dfloat gamma,
                               @restrict        dfloat *  RHS){

  for(dlong e=0;e<Nelements;++e;@outer(0)){

    @shared dfloat s_dpdx[2][p_Nq][p_Nq];
    @shared dfloat s_dpdy[2][p_Nq][p_Nq];
    @shared dfloat s_dpdz[2][p_Nq][p_Nq];
    @shared dfloat s_rhsp[2][p_Nq][p_Nq];

    @shared dfloat s_DT[p_Nq][p_Nq];

    @exclusive dfloat r_dpdx[p_Nq], r_dpdy[p_Nq], r_dpdz[p_Nq], r_rhsp[p_Nq];
    @exclusive dfloat r_dpdt;

    // loop over slabs
    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        #pragma unroll p_Nq
        for(int k=0;k<p_Nq;++k){
          r_dpdx[k] = 0.f;
          r_dpdy[k] = 0.f;
          r_dpdz[k] = 0.f;
          r_rhsp[k] = 0.f;
        }

        s_DT[j][i] = DT[j*p_Nq+i];
      }
    }


    // face 0 & 5
    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        const dlong sk0 = e*p_Nfp*p_Nfaces + 0*p_Nfp + j*p_Nq + i ;
        const dlong sk5 = e*p_Nfp*p_Nfaces + 5*p_Nfp + j*p_Nq + i ;

        surfaceTerms(sk0,0,0,i,j);
        surfaceTerms(sk5,5,1,i,j);
      }
    }


    // face 0 & 5
    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        //face 0
        r_dpdx[0] += s_dpdx[0][j][i];
        r_dpdy[0] += s_dpdy[0][j][i];
        r_dpdz[0] += s_dpdz[0][j][i];
        r_rhsp[0] += s_rhsp[0][j][i];

        //face 5
        r_dpdx[p_Nq-1] += s_dpdx[1][j][i];
        r_dpdy[p_Nq-1] += s_dpdy[1][j][i];
        r_dpdz[p_Nq-1] += s_dpdz[1][j][i];
        r_rhsp[p_Nq-1] += s_rhsp[1][j][i];
      }
    }


    // face 1 & 3
    for(int k=0;k<p_Nq;++k;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        const dlong sk1 = e*p_Nfp*p_Nfaces + 1*p_Nfp + k*p_Nq + i ;
        const dlong sk3 = e*p_Nfp*p_Nfaces + 3*p_Nfp + k*p_Nq + i ;

        surfaceTerms(sk1,1,0,i,k);
        surfaceTerms(sk3,3,1,i,k);
      }
    }


    // face 1 & 3
    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        if (j==0) {//face 1
          #pragma unroll p_Nq
          for (int k=0;k<p_Nq;k++) {
            r_dpdx[k] += s_dpdx[0][k][i];
            r_dpdy[k] += s_dpdy[0][k][i];
            r_dpdz[k] += s_dpdz[0][k][i];
            r_rhsp[k] += s_rhsp[0][k][i];
          }
        }
        if (j==p_Nq-1) {//face 3
          #pragma unroll p_Nq
          for (int k=0;k<p_Nq;k++) {
            r_dpdx[k] += s_dpdx[1][k][i];
            r_dpdy[k] += s_dpdy[1][k][i];
            r_dpdz[k] += s_dpdz[1][k][i];
            r_rhsp[k] += s_rhsp[1][k][i];
          }
        }
      }
    }


    // face 2 & 4
    for(int k=0;k<p_Nq;++k;@inner(1)){
      for(int j=0;j<p_Nq;++j;@inner(0)){

        const dlong sk2 = e*p_Nfp*p_Nfaces + 2*p_Nfp + k*p_Nq + j ;
        const dlong sk4 = e*p_Nfp*p_Nfaces + 4*p_Nfp + k*p_Nq + j ;

        surfaceTerms(sk2,2,0,j,k);
        surfaceTerms(sk4,4,1,j,k);
      }
    }


    // face 2 & 4
    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        if (i==p_Nq-1) {//face 2
          #pragma unroll p_Nq
          for (int k=0;k<p_Nq;k++) {
            r_dpdx[k] += s_dpdx[0][k][j];
            r_dpdy[k] += s_dpdy[0][k][j];
            r_dpdz[k] += s_dpdz[0][k][j];
            r_rhsp[k] += s_rhsp[0][k][j];
          }
        }
        if (i==0) {//face 4
          #pragma unroll p_Nq
          for (int k=0;k<p_Nq;k++) {
            r_dpdx[k] += s_dpdx[1][k][j];
            r_dpdy[k] += s_dpdy[1][k][j];
            r_dpdz[k] += s_dpdz[1][k][j];
            r_rhsp[k] += s_rhsp[1][k][j];
          }
        }
      }
    }


    //layer by layer
    #pragma unroll p_Nq
    for(int k=0;k<p_Nq;++k){
      for(int j=0;j<p_Nq;++j;@inner(1)){
        for(int i=0;i<p_Nq;++i;@inner(0)){

          const dlong gid = i + j*p_Nq + k*p_Nq*p_Nq + e*p_Np*p_Nvgeo;

          const dfloat drdx = vgeo[gid + p_RXID*p_Np];
          const dfloat drdy = vgeo[gid + p_RYID*p_Np];
          const dfloat drdz = vgeo[gid + p_RZID*p_Np];

          const dfloat dsdx = vgeo[gid + p_SXID*p_Np];
          const dfloat dsdy = vgeo[gid + p_SYID*p_Np];
          const dfloat dsdz = vgeo[gid + p_SZID*p_Np];

          const dfloat dtdx = vgeo[gid + p_TXID*p_Np];
          const dfloat dtdy = vgeo[gid + p_TYID*p_Np];
          const dfloat dtdz = vgeo[gid + p_TZID*p_Np];

          const dfloat dqdx = r_dpdx[k];
          const dfloat dqdy = r_dpdy[k];
          const dfloat dqdz = r_dpdz[k];

          s_dpdx[0][j][i] = (drdx*dqdx + drdy*dqdy + drdz*dqdz);
          s_dpdy[0][j][i] = (dsdx*dqdx + dsdy*dqdy + dsdz*dqdz);
          r_dpdt          = (dtdx*dqdx + dtdy*dqdy + dtdz*dqdz);
        }
      }


      for(int j=0;j<p_Nq;++j;@inner(1)){
        for(int i=0;i<p_Nq;++i;@inner(0)){
          dfloat dr = 0, ds = 0;

          #pragma unroll p_Nq
          for(int n=0;n<p_Nq;++n){
            dr += s_DT[n][i]*s_dpdx[0][j][n];
            r_rhsp[n] += s_DT[k][n]*r_dpdt; // DT(m,k)*ut(i,j,k,e)
            ds += s_DT[n][j]*s_dpdy[0][n][i];
          }

          r_rhsp[k] += dr + ds;
        }
      }

    }

    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){

        #pragma unroll p_Nq
        for(int k=0;k<p_Nq;++k){
          const dlong id = e*p_Np + k*p_Nq*p_Nq + j*p_Nq + i;
          const dfloat JW = wJ[id];

          RHS[id] = JW*RHS[id]/gamma - r_rhsp[k];
        }
      }
    }
  }
}
#undef surfaceTerms

#define surfaceTerms(sk)                                                \
{                                                                       \
  const dlong idM = vmapM[sk];                                          \
  const int bc = mapB[idM];                                             \
  if(bc>0) {                                                            \
    const dfloat nx = sgeo[sk*p_Nsgeo+p_NXID];                          \
    const dfloat ny = sgeo[sk*p_Nsgeo+p_NYID];                          \
    const dfloat nz = sgeo[sk*p_Nsgeo+p_NZID];                          \
                                                                        \
    const dfloat pM = P[idM];                                           \
    dfloat pP=0;                                                        \
    insPressureDirichletConditions3D(bc, nu, time, x[idM], y[idM], z[idM], nx, ny, nz, pM, &pP);\
    P[idM] = pP;                                                        \
  }                                                                     \
}

// enter BCs if C0
@kernel void insPressureBCHex3D(const dlong Nelements,
                               @restrict const  dfloat *  sgeo,
                               @restrict const  dlong  *  vmapM,
                               @restrict const  int    *  mapB,
                               const dfloat time,
                               @restrict const  dfloat *  x,
                               @restrict const  dfloat *  y,
                               @restrict const  dfloat *  z,
                               const dfloat nu,
                               @restrict        dfloat *  P){

  for(dlong e=0;e<Nelements;++e;@outer(0)){

    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        // face 0 & 5
        const dlong sk0 = e*p_Nfp*p_Nfaces + 0*p_Nfp + j*p_Nq + i ;
        const dlong sk5 = e*p_Nfp*p_Nfaces + 5*p_Nfp + j*p_Nq + i ;
        surfaceTerms(sk0);
        surfaceTerms(sk5);
      }
    }


    // face 1 & 3
    for(int k=0;k<p_Nq;++k;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        const dlong sk1 = e*p_Nfp*p_Nfaces + 1*p_Nfp + k*p_Nq + i ;
        const dlong sk3 = e*p_Nfp*p_Nfaces + 3*p_Nfp + k*p_Nq + i ;
        surfaceTerms(sk1);
        surfaceTerms(sk3);
      }
    }


    // face 2 & 4
    for(int k=0;k<p_Nq;++k;@inner(1)){
      for(int j=0;j<p_Nq;++j;@inner(0)){
        const dlong sk2 = e*p_Nfp*p_Nfaces + 2*p_Nfp + k*p_Nq + j ;
        const dlong sk4 = e*p_Nfp*p_Nfaces + 4*p_Nfp + k*p_Nq + j ;
        surfaceTerms(sk2);
        surfaceTerms(sk4);
      }
    }
  }
}
