/*

  The MIT License (MIT)

  Copyright (c) 2017-2022 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.

*/

@kernel void advectionVolumeHex3D(const dlong Nelements,
                                  @restrict const  dfloat *  vgeo,
                                  @restrict const  dfloat *  DT,
                                            const  dfloat    t,
                                  @restrict const  dfloat *  x,
                                  @restrict const  dfloat *  y,
                                  @restrict const  dfloat *  z,
                                  @restrict const  dfloat *  q,
                                  @restrict dfloat *  rhsq){

  for(dlong e=0;e<Nelements;++e;@outer(0)){

    @shared dfloat s_DT[p_Nq][p_Nq];

    @shared dfloat s_F[p_Nq][p_Nq][p_Nq];
    @shared dfloat s_G[p_Nq][p_Nq][p_Nq];
    @shared dfloat s_H[p_Nq][p_Nq][p_Nq];

    for(int k=0;k<p_Nq;++k;@inner(2)){
      for(int j=0;j<p_Nq;++j;@inner(1)){
        for(int i=0;i<p_Nq;++i;@inner(0)){
          if(k==0)
            s_DT[j][i] = DT[j*p_Nq+i];

          // geometric factors
          const dlong gbase = e*p_Np*p_Nvgeo + k*p_Nq*p_Nq + j*p_Nq + i;
          const dfloat rx = vgeo[gbase+p_Np*p_RXID];
          const dfloat ry = vgeo[gbase+p_Np*p_RYID];
          const dfloat rz = vgeo[gbase+p_Np*p_RZID];
          const dfloat sx = vgeo[gbase+p_Np*p_SXID];
          const dfloat sy = vgeo[gbase+p_Np*p_SYID];
          const dfloat sz = vgeo[gbase+p_Np*p_SZID];
          const dfloat tx = vgeo[gbase+p_Np*p_TXID];
          const dfloat ty = vgeo[gbase+p_Np*p_TYID];
          const dfloat tz = vgeo[gbase+p_Np*p_TZID];
          const dfloat JW = vgeo[gbase+p_Np*p_JWID];

          // conseved variables
          const dlong  id = e*p_Np + k*p_Nq*p_Nq + j*p_Nq + i;
          const dfloat qn = q[id];

          // (1/J) \hat{div} (G*[F;G;H])
          dfloat cx=0.0, cy=0.0, cz=0.0;
          advectionFlux3D(t, x[id], y[id], z[id], qn, &cx, &cy, &cz);
          s_F[k][j][i] = JW*(rx*cx + ry*cy + rz*cz);
          s_G[k][j][i] = JW*(sx*cx + sy*cy + sz*cz);
          s_H[k][j][i] = JW*(tx*cx + ty*cy + tz*cz);
        }
      }
    }

    for(int k=0;k<p_Nq;++k;@inner(2)){
      for(int j=0;j<p_Nq;++j;@inner(1)){
        for(int i=0;i<p_Nq;++i;@inner(0)){
          const dlong gid = e*p_Np*p_Nvgeo+ k*p_Nq*p_Nq + j*p_Nq +i;
          const dfloat invJW = vgeo[gid + p_IJWID*p_Np];

          dfloat rhsqn = 0;

          for(int n=0;n<p_Nq;++n){
            const dfloat Din = s_DT[n][i];
            const dfloat Djn = s_DT[n][j];
            const dfloat Dkn = s_DT[n][k];

            rhsqn += Din*s_F[k][j][n];
            rhsqn += Djn*s_G[k][n][i];
            rhsqn += Dkn*s_H[n][j][i];
          }

          // move to rhs
          const dlong id = e*p_Np + k*p_Nq*p_Nq + j*p_Nq + i;
          rhsq[id] = invJW*rhsqn;
        }
      }
    }
  }
}


