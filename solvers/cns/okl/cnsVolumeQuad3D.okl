/*

The MIT License (MIT)

Copyright (c) 2017-2022 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/


// isothermal Compressible Navier-Stokes
@kernel void cnsVolumeQuad3D(const dlong Nelements,
                             const int advSwitch,
                             const dfloat fx,
                             const dfloat fy,
                             const dfloat fz,
                             @restrict const  dfloat *  vgeo,
                             @restrict const  dfloat *  x,
                             @restrict const  dfloat *  y,
                             @restrict const  dfloat *  z,
                             @restrict const  dfloat *  D,
                             @restrict const  dfloat *  viscousStresses,
                             @restrict const  dfloat *  q,
                             @restrict dfloat *  rhsq){

  for(dlong e=0;e<Nelements;++e;@outer(0)){

    @shared dfloat s_D[p_Nq][p_Nq];
    @shared dfloat s_F[p_Nfields][p_Nq][p_Nq];
    @shared dfloat s_G[p_Nfields][p_Nq][p_Nq];
    @shared dfloat s_H[p_Nfields][p_Nq][p_Nq];

    @exclusive dfloat r, ru, rv, rw;

    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        s_D[j][i] = D[j*p_Nq+i];

        // geometric factors
        const dlong gbase = e*p_Np*p_Nvgeo + j*p_Nq + i;
        const dfloat rx = vgeo[gbase+p_Np*p_RXID];
        const dfloat ry = vgeo[gbase+p_Np*p_RYID];
        const dfloat rz = vgeo[gbase+p_Np*p_RZID];

        const dfloat sx = vgeo[gbase+p_Np*p_SXID];
        const dfloat sy = vgeo[gbase+p_Np*p_SYID];
        const dfloat sz = vgeo[gbase+p_Np*p_SZID];

        const dfloat tx = vgeo[gbase+p_Np*p_TXID];
        const dfloat ty = vgeo[gbase+p_Np*p_TYID];
        const dfloat tz = vgeo[gbase+p_Np*p_TZID];

        const dfloat JW = vgeo[gbase+p_Np*p_JWID];

        // conserved variables
        const dlong  qbase = e*p_Np*p_Nfields + j*p_Nq + i;

        r  = q[qbase+0*p_Np];
        ru = q[qbase+1*p_Np];
        rv = q[qbase+2*p_Np];
        rw = q[qbase+3*p_Np];

        const dfloat p  = r*p_RT;

        // primitive variables (velocity)
        const dfloat u = ru/r, v = rv/r, w = rw/r;

        // viscous stresses (precomputed by cnsStressesVolumeQuad3D)
        const dlong id = e*p_Np*p_Nstresses + j*p_Nq + i;
        const dfloat T11 = viscousStresses[id+0*p_Np];
        const dfloat T12 = viscousStresses[id+1*p_Np];
        const dfloat T13 = viscousStresses[id+2*p_Np];
        const dfloat T22 = viscousStresses[id+3*p_Np];
        const dfloat T23 = viscousStresses[id+4*p_Np];
        const dfloat T33 = viscousStresses[id+5*p_Np];

        // (1/J) \hat{div} (G*[F;G])

        {
          // F0 = ru, G0 = rv
          const dfloat f = -advSwitch*ru;
          const dfloat g = -advSwitch*rv;
          const dfloat h = -advSwitch*rw;

          s_F[0][j][i] = JW*(rx*f + ry*g + rz*h);
          s_G[0][j][i] = JW*(sx*f + sy*g + sz*h);
          s_H[0][j][i] = JW*(tx*f + ty*g + tz*h);
        }

        //      rz*JW*(-advSwitch*rw)
        // df/dx + dg/dy  + dg/dz
        // r,s stuff + tx*f +

        {
          // F1 = 2*mu*S11 - (ru^2+p), G1 = 2*mu*S12 - (rvu)
          const dfloat f = T11-advSwitch*(ru*u+p);
          const dfloat g = T12-advSwitch*(rv*u);
          const dfloat h = T13-advSwitch*(rw*u);
          s_F[1][j][i] = JW*(rx*f + ry*g + rz*h);
          s_G[1][j][i] = JW*(sx*f + sy*g + sz*h);
          s_H[1][j][i] = JW*(tx*f + ty*g + tz*h);
        }

        {
          // F2 = 2*mu*S21 - (ruv), G2 = 2*mu*S22 - (rv^2+p)
          const dfloat f = T12-advSwitch*(ru*v);
          const dfloat g = T22-advSwitch*(rv*v+p);
          const dfloat h = T23-advSwitch*(rw*v);
          s_F[2][j][i] = JW*(rx*f + ry*g + rz*h);
          s_G[2][j][i] = JW*(sx*f + sy*g + sz*h);
          s_H[2][j][i] = JW*(tx*f + ty*g + tz*h);
        }

        {
          const dfloat f = T13-advSwitch*(ru*w);
          const dfloat g = T23-advSwitch*(rv*w);
          const dfloat h = T33-advSwitch*(rw*w+p);
          s_F[3][j][i] = JW*(rx*f + ry*g + rz*h);
          s_G[3][j][i] = JW*(sx*f + sy*g + sz*h);
          s_H[3][j][i] = JW*(tx*f + ty*g + tz*h);
        }
      }
    }


    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        const dlong gid = e*p_Np*p_Nvgeo+ j*p_Nq +i;
        const dfloat invJW = vgeo[gid + p_IJWID*p_Np];

        // TW: CHECK SIGN ???
        dfloat rhsq0 = s_H[0][j][i];
        dfloat rhsq1 = s_H[1][j][i];
        dfloat rhsq2 = s_H[2][j][i];
        dfloat rhsq3 = s_H[3][j][i];

        for(int n=0;n<p_Nq;++n){
          const dfloat Din = s_D[n][i];
          const dfloat Djn = s_D[n][j];
          rhsq0 += Din*s_F[0][j][n];
          rhsq0 += Djn*s_G[0][n][i];
          rhsq1 += Din*s_F[1][j][n];
          rhsq1 += Djn*s_G[1][n][i];
          rhsq2 += Din*s_F[2][j][n];
          rhsq2 += Djn*s_G[2][n][i];
          rhsq3 += Din*s_F[3][j][n];
          rhsq3 += Djn*s_G[3][n][i];
        }

        // constrain momentum changes to lie on sphere
        const dfloat xij = x[i+j*p_Nq+e*p_Np];
        const dfloat yij = y[i+j*p_Nq+e*p_Np];
        const dfloat zij = z[i+j*p_Nq+e*p_Np];

        // add coriolis force to momentum equation
        rhsq1 -= p_fainv*zij*(yij*rw-zij*rv); // check if density should be here
        rhsq2 -= p_fainv*zij*(zij*ru-xij*rw);
        rhsq3 -= p_fainv*zij*(xij*rv-yij*ru);

#if 0
        // remove radial component of momentum change
        const dfloat xdotrhsq = (rhsq1*xij + rhsq2*yij + rhsq3*zij)*p_invRadiusSq;

        rhsq1 -= xij*xdotrhsq;
        rhsq2 -= yij*xdotrhsq;
        rhsq3 -= zij*xdotrhsq;
#endif

        const dlong base = e*p_Np*p_Nfields + j*p_Nq + i;

        // move to rhs . Why negative
        rhsq[base+0*p_Np] = -invJW*rhsq0;
        rhsq[base+1*p_Np] = -invJW*rhsq1;
        rhsq[base+2*p_Np] = -invJW*rhsq2;
        rhsq[base+3*p_Np] = -invJW*rhsq3;

      }
    }
  }
}


@kernel void cnsStressesVolumeQuad3D(const dlong Nelements,
                                    @restrict const  dfloat *  vgeo,
                                    @restrict const  dfloat *  D,
                                    const dfloat mu,
                                    @restrict const  dfloat *  q,
                                    @restrict dfloat *  viscousStresses){

  for(dlong e=0;e<Nelements;++e;@outer(0)){

    @shared dfloat s_D[p_Nq][p_Nq];
    @shared dfloat s_u[p_Nq][p_Nq];
    @shared dfloat s_v[p_Nq][p_Nq];
    @shared dfloat s_w[p_Nq][p_Nq];

    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){

        s_D[j][i] = D[j*p_Nq+i];

        const dlong qbase = e*p_Nfields*p_Np + j*p_Nq + i;
        const dfloat r  = q[qbase + 0*p_Np];
        const dfloat ru = q[qbase + 1*p_Np];
        const dfloat rv = q[qbase + 2*p_Np];
        const dfloat rw = q[qbase + 3*p_Np];

        s_u[j][i] = ru/r;
        s_v[j][i] = rv/r;
        s_w[j][i] = rw/r;

      }
    }


    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){

        dfloat dudr = 0, duds = 0, dvdr = 0, dvds = 0, dwdr = 0, dwds = 0;

        for(int n=0;n<p_Nq;++n){
          const dfloat Din = s_D[i][n];
          const dfloat Djn = s_D[j][n];

          dudr += Din*s_u[j][n];
          duds += Djn*s_u[n][i];

          dvdr += Din*s_v[j][n];
          dvds += Djn*s_v[n][i];

          dwdr += Din*s_w[j][n];
          dwds += Djn*s_w[n][i];
        }

        const dlong gbase = e*p_Np*p_Nvgeo + j*p_Nq + i;
        const dfloat rx = vgeo[gbase+p_Np*p_RXID];
        const dfloat ry = vgeo[gbase+p_Np*p_RYID];
        const dfloat rz = vgeo[gbase+p_Np*p_RZID];
        const dfloat sx = vgeo[gbase+p_Np*p_SXID];
        const dfloat sy = vgeo[gbase+p_Np*p_SYID];
        const dfloat sz = vgeo[gbase+p_Np*p_SZID];
        const dfloat tx = vgeo[gbase+p_Np*p_TXID];
        const dfloat ty = vgeo[gbase+p_Np*p_TYID];
        const dfloat tz = vgeo[gbase+p_Np*p_TZID];

        const dfloat dudx = rx*dudr + sx*duds + tx*s_u[j][i];
        const dfloat dudy = ry*dudr + sy*duds + ty*s_u[j][i];
        const dfloat dudz = rz*dudr + sz*duds + tz*s_u[j][i];

        const dfloat dvdx = rx*dvdr + sx*dvds + tx*s_v[j][i];
        const dfloat dvdy = ry*dvdr + sy*dvds + ty*s_v[j][i];
        const dfloat dvdz = rz*dvdr + sz*dvds + tz*s_v[j][i];

        const dfloat dwdx = rx*dwdr + sx*dwds + tx*s_w[j][i];
        const dfloat dwdy = ry*dwdr + sy*dwds + ty*s_w[j][i];
        const dfloat dwdz = rz*dwdr + sz*dwds + tz*s_w[j][i];

        const dfloat divV = dudx + dvdy + dwdz;

        const dfloat S11 = p_half*(dudx+dudx) - p_third*divV;
        const dfloat S22 = p_half*(dvdy+dvdy) - p_third*divV;
        const dfloat S33 = p_half*(dwdz+dwdz) - p_third*divV;

        const dfloat S12 = p_half*(dudy+dvdx);
        const dfloat S13 = p_half*(dudz+dwdx);
        const dfloat S23 = p_half*(dvdz+dwdy);

        const dlong sbase = e*p_Nstresses*p_Np + j*p_Nq + i;

        viscousStresses[sbase + 0*p_Np] = p_two*mu*S11;
        viscousStresses[sbase + 1*p_Np] = p_two*mu*S12;
        viscousStresses[sbase + 2*p_Np] = p_two*mu*S13;
        viscousStresses[sbase + 3*p_Np] = p_two*mu*S22;
        viscousStresses[sbase + 4*p_Np] = p_two*mu*S23;
        viscousStresses[sbase + 5*p_Np] = p_two*mu*S33;
      }
    }
  }
}
